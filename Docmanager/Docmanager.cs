///////////////////////////////////////////////////////////
//  GroupParser.cs
//  Implementation of the Class GroupParser
//  Generated by Enterprise Architect
//  Created on:      26-nov-2022 12:13:28
//  Original author: Lars
///////////////////////////////////////////////////////////

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Globalization;
using System.Linq.Expressions;

namespace Docmanager
{
    internal class Docmanager : IDocmanager
    {
        //Fetch and derealize json file
        const string filepath = @"C:\Users\Yea\IKT300\Engineering units - mappe eksamen\Docmanager\POSC.json";
        List<UOM> jsonDeserialized = JsonConvert.DeserializeObject<List<UOM>>(File.ReadAllText(filepath));

        public bool NameExists(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();
            }
            catch (InvalidOperationException)
            {
                return false;
            }

            return true;
        }

        public List<string> ReadKeys(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    List<string> output = new List<string>();
                    string matchString = JsonConvert.SerializeObject(match, Formatting.Indented);
                    JObject matchJObject = (JObject)JsonConvert.DeserializeObject(matchString);

                    foreach (var item in matchJObject)
                    {
                        output.Add(item.Key.ToString());
                    }

                    return output;
                }
                catch (NullReferenceException)
                {
                    return new List<string>() { "This unit does not have annotation" };
                }
            }
            catch (InvalidOperationException)
            {
                return new List<string>() { "This name is not in file" };
            }

            return new List<string>() { "0" };
        }
        //public readAllUnitNames

        public string ReadAnnotation(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    return match.annotation;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have annotation";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        public string ReadUOM(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    string SameUnitString = match.SameUnit.ToString();
                    JObject SameUnitJObject = (JObject)JsonConvert.DeserializeObject(SameUnitString);
                    return (string)SameUnitJObject["uom"];
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have annotation";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        public string ReadIsBase(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    return match.ConversionToBaseUnit.baseUnit;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have ConversionToBaseUnit.baseUnit";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        public bool IsBase(string unitName)
        {
            try
            {
                UOM match =
                 (from unit in jsonDeserialized
                  where unit.Name == unitName
                  select unit).First();

                try
                {
                    return match.BaseUnit != null;
                }
                catch (NullReferenceException)
                {
                    throw new NullReferenceException("Logfile cannot be read-only");
                }
            }
            catch (InvalidOperationException)
            {
                throw new InvalidOperationException("This name is not in file");
            }
            return true;
        }

        public string NameOfBaseUnit(string annotationName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.annotation == annotationName
                     select unit).First();

                try
                {
                    return match.Name;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have a name";
                }
            }
            catch (InvalidOperationException)
            {
                return "This annotation is not in file";
            }
        }

        public string ReadConversion(string unitName, ref double A, ref double B, ref double C, ref double D)
        {
            A = B = C = D = 0;

            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    if (match.ConversionToBaseUnit.baseUnit != null)
                    {
                        C = 1;
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.A != null)
                    {
                        A = double.Parse(match.ConversionToBaseUnit.Formula.A);
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.B != null)
                    {
                        B = double.Parse(match.ConversionToBaseUnit.Formula.B);
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.C != null)
                    {
                        C = double.Parse(match.ConversionToBaseUnit.Formula.C);
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.D != null)
                    {
                        D = double.Parse(match.ConversionToBaseUnit.Formula.D);
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Factor != null)
                    {


                        B = double.Parse(match.ConversionToBaseUnit.Factor, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Fraction.Numerator != null)
                    {
                        B = double.Parse(match.ConversionToBaseUnit.Fraction.Numerator);
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Fraction.Denominator != null)
                    {
                        C = double.Parse(match.ConversionToBaseUnit.Fraction.Denominator);
                    }
                }
                catch (NullReferenceException) { }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }

            return "0";
        }

        public string CreateUnit(string id, string annotation, string name, string quantityType, string dimensionalclass, string baseunit)
        {
            String newUnitString =
                "{" +
                    "\"id\": null," +
                    "\"annotation\": null," +
                    "\"Name\": null," +
                    "\"QuantityType\": null," +
                    "\"DimensionalClass\": null," +
                    "\"SameUnit\": {" +
                      "\"uom\": null," +
                      "\"namingSystem\": null" +
                    "}," +
                    "\"CatalogName\": null," +
                    "\"CatalogSymbol\": {" +
                      "\"isExplicit\": null," +
                      "\"text\": null" +
                    "}," +
                    "\"ConversionToBaseUnit\": {" +
                      "\"baseUnit\": null," +
                      "\"Formula\": {" +
                        "\"A\": null," +
                        "\"B\": null," +
                        "\"C\": null," +
                        "\"D\": null" +
                      "}" +
                    "}" +
                "}";

            UOM newUnitDeserialized = JsonConvert.DeserializeObject<UOM>(newUnitString);

            newUnitDeserialized.id = id;
            newUnitDeserialized.annotation = annotation;
            newUnitDeserialized.Name = name;
            newUnitDeserialized.QuantityType = quantityType;
            newUnitDeserialized.DimensionalClass = dimensionalclass;
            newUnitDeserialized.ConversionToBaseUnit.baseUnit = baseunit;

            jsonDeserialized.Add(newUnitDeserialized);

            string output = JsonConvert.SerializeObject(jsonDeserialized, Formatting.Indented);

            File.WriteAllText(filepath, output);

            return "0";
        }

        public string EditUnit(string oldName, string keyToChange, dynamic newValue)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == oldName
                select unit).First();

                if (new[] { "A", "B", "C", "D" }.Contains(keyToChange))
                {
                    if ((bool)match.BaseUnit == true)
                    {
                        return "This unit is a base unit, base units can not have conversion";
                    }
                    else
                    {
                        double A, B, C, D;
                        A = B = C = D = 0;
                        ReadConversion(oldName, ref A, ref B, ref C, ref D);

                        string conversion =
                        "{" +
                            "\"baseUnit\": null," +
                            "\"Formula\": {" +
                                "\"A\": null," +
                                "\"B\": null," +
                                "\"C\": null," +
                                "\"D\": null" +
                            "}" +
                        "}";
                    }

                }

                switch (keyToChange)
                    {
                    case "id":
                        match.id = newValue;
                        break;
                    case "Name":
                        match.Name = newValue;
                        break;
                    case "annotation":
                        match.annotation = newValue;
                        break;
                    //case "QuantityType":
                        //addQuantityType(oldName, newValue)
                        //break;
                    case "DimensionalClass":
                        match.DimensionalClass = newValue;
                        break;
                    //case IDocmanager.UnitKeys.UOM:
                        //
                        //break;
                    //case IDocmanager.UnitKeys.NamingSystem:
                        //match.id = newValue;
                        //break;
                    case "CatalogName":
                        match.CatalogName = newValue;
                        break;
                    //case "CatalogSymbolIsEzplicit":
                        //
                        //break;
                    //case "CatalogSymbolText":
                        //
                        //break;
                    case "IsBaseUnit":
                        match.BaseUnit = newValue;
                        break;
                    //case "BaseUnit":
                    //
                    //break;
                    case "A":
                        //
                        break;
                    case "B":
                        //;
                        break;
                    case "C":
                        //
                        break;
                    case "D":

                        break;
                    default:
                        return "Option does not exist";
                }

                string output = JsonConvert.SerializeObject(jsonDeserialized, Formatting.Indented);

                File.WriteAllText(filepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This unit name is not in file";
            }
            return "0";
        }

        public string DeleteUnit(string id)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.id == id
                     select unit).First();

                jsonDeserialized.Remove(match);

                string output = JsonConvert.SerializeObject(jsonDeserialized, Formatting.Indented);

                File.WriteAllText(filepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This ID is not in file";
            }
            return "0";
        }

        public string RemoveQualityType(string unitName, string quantityTypeName)
        {
            try
            {
                UOM match =
                    (from unit in jsonDeserialized
                     where unit.Name == unitName
                     select unit).First();

                string QuantityTypeString = match.QuantityType.ToString();
                JArray QuantityTypeJArray = (JArray)JsonConvert.DeserializeObject(QuantityTypeString);
                QuantityTypeJArray.Where(i => i.Type == JTokenType.String && (string)i == quantityTypeName).ToList().ForEach(i => i.Remove());

                match.QuantityType = QuantityTypeJArray;
                string output = JsonConvert.SerializeObject(jsonDeserialized, Formatting.Indented);

                File.WriteAllText(filepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }

            return "0";
        }

        public class CatalogSymbol
        {
            public string isExplicit { get; set; }
            public string text { get; set; }
        }

        public class ConversionToBaseUnit
        {
            public string baseUnit { get; set; }
            public string Factor { get; set; }
            public Fraction Fraction { get; set; }
            public Formula Formula { get; set; }
        }

        public class Formula
        {
            public string A { get; set; }
            public string B { get; set; }
            public string C { get; set; }
            public string D { get; set; }
        }

        public class Fraction
        {
            public string Numerator { get; set; }
            public string Denominator { get; set; }
        }

        public class UOM
        {
            public string id { get; set; }
            public string annotation { get; set; }
            public string Name { get; set; }
            public object QuantityType { get; set; }
            public string DimensionalClass { get; set; }
            public object SameUnit { get; set; }
            public string CatalogName { get; set; }
            public CatalogSymbol CatalogSymbol { get; set; }
            public object BaseUnit { get; set; }
            public string Deprecated { get; set; }
            public ConversionToBaseUnit ConversionToBaseUnit { get; set; }

        }




    }//end GroupParser

}//end namespace Docmanager