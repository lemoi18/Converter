///////////////////////////////////////////////////////////
//  GroupParser.cs
//  Implementation of the Class GroupParser
//  Generated by Enterprise Architect
//  Created on:      26-nov-2022 12:13:28
//  Original author: Lars
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Docmanager;
using System.Runtime.CompilerServices;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using System.Text.RegularExpressions;


namespace Docmanager
{
    internal class Docmanager : IDocmanager
    {
        //Fetch and derealize json file
        const string filepath = @"E:\Dataing\IKT300\Engineering units - mappe eksamen\Docmanager\POSC.json";
        List<Root> jsonDeserialized = JsonConvert.DeserializeObject<List<Root>>(File.ReadAllText(filepath));

        public string ReadAnnotation(string unitName)
        {
            Root match =
                (from unit in jsonDeserialized
                 where unit.Name == unitName
                 select unit).First();

            try
            {
                return match.annotation;
            }
            catch (NullReferenceException) {return "";}
            
            return "";
        }

        public int ReadConversion(string unitName, ref double A, ref double B, ref double C, ref double D) 
        {
            A = 0; B = 0; C = 0; D = 0;

            Root match =
                (from unit in jsonDeserialized
                 where unit.Name == unitName
                 select unit).First();

            try
            {
                if (match.ConversionToBaseUnit.baseUnit != null)
                {
                    C = 1;
                }
            } catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Formula.A != null)
                {
                    A = double.Parse(match.ConversionToBaseUnit.Formula.A);
                }
            } catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Formula.B != null)
                {
                    B = double.Parse(match.ConversionToBaseUnit.Formula.B);
                }
            }
            catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Formula.C != null)
                {
                    C = double.Parse(match.ConversionToBaseUnit.Formula.C);
                }
            }
            catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Formula.D != null)
                {
                    D = double.Parse(match.ConversionToBaseUnit.Formula.D);
                }
            }
            catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Factor != null)
                {
                    B = double.Parse(match.ConversionToBaseUnit.Factor);
                }
            } catch (NullReferenceException) { }

            try 
            {
                if (match.ConversionToBaseUnit.Fraction.Numerator != null)
                {
                    B = double.Parse(match.ConversionToBaseUnit.Fraction.Numerator);
                }
            } catch (NullReferenceException) { }
            
            try
            {
                if (match.ConversionToBaseUnit.Fraction.Denominator != null)
                {
                    C = double.Parse(match.ConversionToBaseUnit.Fraction.Denominator);
                }
            } catch (NullReferenceException) { }


            return 0;
        }
        public class BaseUnit
        {
            public string BasicAuthority { get; set; }
            public string Description { get; set; }
        }

        public class CatalogSymbol
        {
            public string isExplicit { get; set; }
            public string text { get; set; }
        }

        public class ConversionToBaseUnit
        {
            public string baseUnit { get; set; }
            public string Factor { get; set; }
            public Fraction Fraction { get; set; }
            public Formula Formula { get; set; }
        }

        public class Formula
        {
            public string A { get; set; }
            public string B { get; set; }
            public string C { get; set; }
            public string D { get; set; }
        }

        public class Fraction
        {
            public string Numerator { get; set; }
            public string Denominator { get; set; }
        }

        public class Root
        {
            public string id { get; set; }
            public string annotation { get; set; }
            public string Name { get; set; }
            public object QuantityType { get; set; }
            public string DimensionalClass { get; set; }
            public object SameUnit { get; set; }
            public string CatalogName { get; set; }
            public CatalogSymbol CatalogSymbol { get; set; }
            public BaseUnit BaseUnit { get; set; }
            public string Deprecated { get; set; }
            public ConversionToBaseUnit ConversionToBaseUnit { get; set; }
        }




    }//end GroupParser

}//end namespace Docmanager