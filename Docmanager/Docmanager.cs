///////////////////////////////////////////////////////////
//  GroupParser.cs
//  Implementation of the Class GroupParser
//  Generated by Enterprise Architect
//  Created on:      26-nov-2022 12:13:28
//  Original author: Lars
///////////////////////////////////////////////////////////

using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Globalization;
using System.Linq.Expressions;
using System.Text.RegularExpressions;
using static Docmanager.Docmanager;

namespace Docmanager
{
    internal class Docmanager : IDocmanager
    {
        //Fetch and derealize json files
        const string POSCfilepath = @"C:\Users\Yea\IKT300\Engineering units - mappe eksamen\Docmanager\POSC.json";
        List<UOM> Units = JsonConvert.DeserializeObject<List<UOM>>(File.ReadAllText(POSCfilepath));

        const string DimensionsFilepath = @"C:\Users\Yea\IKT300\Engineering units - mappe eksamen\Docmanager\UnitDimensions.json";
        List<Dimension> Dimensions = JsonConvert.DeserializeObject<List<Dimension>>(File.ReadAllText(DimensionsFilepath));

        public List<List<KeyValuePair<string, List<String>>>> ReadUnits()
        {
            List<List<KeyValuePair<string, List<String>>>> output = new List<List<KeyValuePair<string, List<String>>>>();

            foreach (var unit in Units)
            {
                var unitKVPs = new List<KeyValuePair<string, List<string>>>();

                unitKVPs.Add(new KeyValuePair<string, List<string>>("id", new List<string>() { unit.id }));
                unitKVPs.Add(new KeyValuePair<string, List<string>>("annotation", new List<string>() { unit.annotation }));
                unitKVPs.Add(new KeyValuePair<string, List<string>>("name", new List<string>() { unit.Name }));

                string quantityTypeString = "none";
                if (unit.QuantityType != null)
                {
                    quantityTypeString = unit.QuantityType.ToString();
                }
                try
                {
                    JArray quantityTypeJArray = (JArray)JsonConvert.DeserializeObject(quantityTypeString);

                    unitKVPs.Add(new KeyValuePair<string, List<string>>("quantityType", quantityTypeJArray.ToObject<List<string>>()));
                }
                catch (JsonReaderException)
                {
                    unitKVPs.Add(new KeyValuePair<string, List<string>>("quantityType", new List<string>() { quantityTypeString }));
                }
                unitKVPs.Add(new KeyValuePair<string, List<string>>("DimensionalClass", new List<string>() { unit.DimensionalClass }));

                string sameUnitString = "none";
                try
                {
                    if (unit.SameUnit != null)
                    {
                        sameUnitString = unit.SameUnit.ToString();
                        JObject SameUnitJObject = (JObject)JsonConvert.DeserializeObject(sameUnitString);
                        unitKVPs.Add(new KeyValuePair<string, List<string>>("uom", new List<string>() { SameUnitJObject["uom"].ToString() }));
                    }
                }
                catch (InvalidCastException)
                {
                    //unitKVPs.Add(new KeyValuePair<string, List<string>>("uom", new List<string>() { sameUnitString }));
                }

                //unitKVPs.Add(new KeyValuePair<string, List<string>>("isBaseUnit", unit.BaseUnit.ToString()));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("Aliases", unit.Aliases));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("BaseUnit", unit.ConversionToBaseUnit.baseUnit));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("A", unit.ConversionToBaseUnit.Formula.A.ToString()));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("B", unit.ConversionToBaseUnit.Formula.B.ToString()));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("C", unit.ConversionToBaseUnit.Formula.C.ToString()));
                //unitKVPs.Add(new KeyValuePair<string, List<string>>("D", unit.ConversionToBaseUnit.Formula.D.ToString()));

                output.Add(unitKVPs);
            }
            return output;
        }

        public bool NameExists(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();
            }
            catch (InvalidOperationException)
            {
                return false;
            }

            return true;
        }

        public List<string> ReadProperties(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    List<string> output = new List<string>();

                    string matchString = JsonConvert.SerializeObject(match, Formatting.Indented);
                    JObject matchJObject = (JObject)JsonConvert.DeserializeObject(matchString);

                    foreach (var prop in matchJObject)
                    {
                        switch (prop.Value.Type.ToString())
                        {
                            case "String":
                                output.Add(prop.Key);
                                break;
                            case "Array":
                                output.Add(prop.Key);
                                break;
                            case "Object":
                                //
                                break;
                            default:
                                break;
                        }

                    }

                    output.Add("A");
                    output.Add("B");
                    output.Add("C");
                    output.Add("D");
                    output.Add("IsBaseUnit");

                    return output;
                }
                catch (NullReferenceException)
                {
                    return new List<string>() { "This unit does not have annotation" };
                }
            }
            catch (InvalidOperationException)
            {
                return new List<string>() { "This name is not in file" };
            }

            return new List<string>() { "0" };
        }

        public string ReadAnnotation(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    return match.annotation;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have annotation";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        public string ReadBaseUnit(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();
                try
                {
                    return match.ConversionToBaseUnit.baseUnit;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have base unit";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        //public string ReadUOM(string unitName)
        //{
        //    try
        //    {
        //        UOM match =
        //            (from unit in Units
        //             where unit.Name == unitName
        //             select unit).First();

        //        try
        //        {
        //            string SameUnitString = match.SameUnit.ToString();
        //            JObject SameUnitJObject = (JObject)JsonConvert.DeserializeObject(SameUnitString);
        //            return (string)SameUnitJObject["uom"];
        //        }
        //        catch (NullReferenceException)
        //        {
        //            return "This unit does not have annotation";
        //        }
        //    }
        //    catch (InvalidOperationException)
        //    {
        //        return "This name is not in file";
        //    }
        //}

        public string ReadIsBase(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    return match.ConversionToBaseUnit.baseUnit;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have ConversionToBaseUnit.baseUnit";
                }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }
        }

        public bool IsBase(string unitName)
        {
            try
            {
                UOM match =
                 (from unit in Units
                  where unit.Name == unitName
                  select unit).First();

                try
                {
                    return match.BaseUnit != null;
                }
                catch (NullReferenceException)
                {
                    throw new NullReferenceException("Logfile cannot be read-only");
                }
            }
            catch (InvalidOperationException)
            {
                throw new InvalidOperationException("This name is not in file");
            }
            return true;
        }

        public string ReadUnitName(string annotationName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.annotation == annotationName
                     select unit).First();

                try
                {
                    return match.Name;
                }
                catch (NullReferenceException)
                {
                    return "This unit does not have a name";
                }
            }
            catch (InvalidOperationException)
            {
                return "This annotation is not in file";
            }
        }

        public string ReadConversion(string unitName, ref double A, ref double B, ref double C, ref double D)
        {
            A = B = C = D = 0;

            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                try
                {
                    if (match.ConversionToBaseUnit.baseUnit != null)
                    {
                        C = 1;
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.A != null)
                    {
                        A = double.Parse(match.ConversionToBaseUnit.Formula.A, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.B != null)
                    {
                        B = double.Parse(match.ConversionToBaseUnit.Formula.B, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.C != null)
                    {
                        C = double.Parse(match.ConversionToBaseUnit.Formula.C, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Formula.D != null)
                    {
                        D = double.Parse(match.ConversionToBaseUnit.Formula.D, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Factor != null)
                    {
                        B = double.Parse(match.ConversionToBaseUnit.Factor, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Fraction.Numerator != null)
                    {
                        B = double.Parse(match.ConversionToBaseUnit.Fraction.Numerator, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }

                try
                {
                    if (match.ConversionToBaseUnit.Fraction.Denominator != null)
                    {
                        C = double.Parse(match.ConversionToBaseUnit.Fraction.Denominator, CultureInfo.GetCultureInfo("en-US"));
                    }
                }
                catch (NullReferenceException) { }
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }

            return "0";
        }

        public string CreateBaseUnit(string id, string annotation, string name, List<string> quantityType, string dimensionalclass, string uom, List<string> aliases)
        {
            JObject SameUnitJObject = new JObject
            {
                ["uom"] = uom,
            };


            UOM newUnit = new UOM();

            newUnit.id = id;
            newUnit.annotation = annotation;
            newUnit.Name = name;
            newUnit.QuantityType = quantityType;
            newUnit.DimensionalClass = dimensionalclass;
            newUnit.Aliases = aliases;
            newUnit.SameUnit = SameUnitJObject;

            Units.Add(newUnit);

            string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

            File.WriteAllText(POSCfilepath, output);

            return "0";
        }

        public string CreateSecondaryUnit(string id, string annotation, string name, List<string> quantityType, string dimensionalclass, string uom, string baseunit, double A, double B, double C, double D, List<string> Aliases)
        {
            Formula formulaformula = new Formula
            {
                A = A.ToString(),
                B = B.ToString(),
                C = C.ToString(),
                D = D.ToString()
            };
            ConversionToBaseUnit conversionConversion = new ConversionToBaseUnit
            {
                baseUnit = baseunit,
                Formula = formulaformula
            };

            UOM newUnit = new UOM();

            newUnit.id = id;
            newUnit.annotation = annotation;
            newUnit.Name = name;
            newUnit.QuantityType = quantityType;
            newUnit.DimensionalClass = dimensionalclass;
            newUnit.ConversionToBaseUnit = conversionConversion;
            newUnit.Aliases = Aliases;

            Units.Add(newUnit);

            string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

            File.WriteAllText(POSCfilepath, output);

            return "0";
        }

        public string EditUnit(string oldName, string keyToChange, dynamic newValue)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == oldName
                select unit).First();

                if (new[] { "A", "B", "C", "D" }.Contains(keyToChange))
                {
                    try
                    {

                        if ((bool)match.BaseUnit == true)
                        {
                            return "This unit is a base unit, base units can not have conversion";
                        }
                    }
                    catch (NullReferenceException) { };


                    match.ConversionToBaseUnit.Formula.A = "666";
                }

                switch (keyToChange)
                    {
                    case "id":
                        match.id = newValue;
                        break;
                    case "Name":
                        match.Name = newValue;
                        break;
                    case "annotation":
                        match.annotation = newValue;
                        break;
                    //case "QuantityType":
                    //    AddQuantityType(oldName, newValue);
                    //    break;
                    case "DimensionalClass":
                        match.DimensionalClass = newValue;
                        break;
                    //case "uom":
                    //    match.SameUnit.uom = newValue;
                    //    break;
                    //case "NamingSystem":
                    //    match.SameUnit.namingSystem = newValue;
                    //    break;
                    case "CatalogName":
                        match.CatalogName = newValue;
                        break;
                    case "CatalogSymbolIsExplicit":
                        match.CatalogSymbol.isExplicit = newValue;
                        break;
                    case "CatalogSymbolText":
                        match.CatalogSymbol.text = newValue;
                        break;
                    case "IsBaseUnit":
                        match.BaseUnit = newValue;
                        break;
                    case "BaseUnit":
                        match.ConversionToBaseUnit.baseUnit = newValue;
                        break;
                    case "A":
                        match.ConversionToBaseUnit.Formula.A = newValue;
                        break;
                    case "B":
                        match.ConversionToBaseUnit.Formula.B = newValue;
                        break;
                    case "C":
                        match.ConversionToBaseUnit.Formula.C = newValue;
                        break;
                    case "D":
                        match.ConversionToBaseUnit.Formula.D = newValue;
                        break;
                    default:
                        return "Option does not exist";
                }

                string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

                File.WriteAllText(POSCfilepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This unit name is not in file";
            }
            return "0";
        }

        public string DeleteUnit(string id)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.id == id
                     select unit).First();

                Units.Remove(match);

                string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

                File.WriteAllText(POSCfilepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This ID is not in file";
            }
            return "0";
        }
        private bool QuantityExists(UOM unit, string quantityType)
        {
            string quantityString = "none";
            if (unit.QuantityType != null)
            {
                quantityString = unit.QuantityType.ToString();
            }
            //QuantityType is array
            try
            {
                JArray quantityJArray = (JArray)JsonConvert.DeserializeObject(quantityString);
                return quantityJArray.Any(t => t.Value<string>() == quantityType);
            }
            //QuantityType is object
            catch (JsonReaderException)
            {
                return (quantityString == quantityType);
            }
        }
        public List<string> ReadUOM(string quantityType)
        {
            List<string> output = new List<string>();

            //Check each unit for spesefied quantityClassName
            foreach(UOM unit in Units)
            {
                if (QuantityExists(unit, quantityType))
                {
                    string sameUnitString = JsonConvert.SerializeObject(unit.SameUnit, Formatting.Indented);
                    JObject sameUnitJObject = (JObject)JsonConvert.DeserializeObject(sameUnitString);
                    string test = sameUnitJObject["uom"].ToString();
                    output.Add(test);
                }
            }

            return output;
        }

        public string AddQuantityType(string unitName, string quantityTypeName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                string QuantityTypeString = match.QuantityType.ToString();
                JArray QuantityTypeJArray = (JArray)JsonConvert.DeserializeObject(QuantityTypeString);
                QuantityTypeJArray.Add(quantityTypeName);

                match.QuantityType = QuantityTypeJArray;
                string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

                File.WriteAllText(POSCfilepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This unit name is not in file";
            }

            return "0";
        }

        public string RemoveQuantityType(string unitName, string quantityTypeName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();

                string QuantityTypeString = match.QuantityType.ToString();
                JArray QuantityTypeJArray = (JArray)JsonConvert.DeserializeObject(QuantityTypeString);
                QuantityTypeJArray.Where(i => i.Type == JTokenType.String && (string)i == quantityTypeName).ToList().ForEach(i => i.Remove());

                match.QuantityType = QuantityTypeJArray;
                string output = JsonConvert.SerializeObject(Units, Formatting.Indented);

                File.WriteAllText(POSCfilepath, output);
            }
            catch (InvalidOperationException)
            {
                return "This name is not in file";
            }

            return "0";
        }

        public List<string[]> ReadDimensions()
        {
            List<string[]> output = new List<string[]>();

            foreach(var dimension in Dimensions)
            {
                string[] dimensionString = {dimension.Symbol, dimension.Definition, dimension.SIUnit};
                output.Add(dimensionString);
            }
            return output;
        }

        public string[] ReadDimension(string symbol)
        {
            try
            {
                Dimension match =
                    (from dimension in Dimensions
                     where dimension.Symbol == symbol
                     select dimension).First();
                try
                {
                    string[] output = { match.Symbol.ToString(), match.Definition, match.SIUnit };
                    return output;
                }
                catch (NullReferenceException)
                {
                    string[] output = { "This unit does not have annotation" };
                    return output;
                }
            }
            catch (InvalidOperationException)
            {
                string[] output = { "This symbol is not in file" };
                return output;
            }
        }

        public List<string> ReadAliases(string unitName)
        {
            try
            {
                UOM match =
                    (from unit in Units
                     where unit.Name == unitName
                     select unit).First();
                try
                {
                    return match.Aliases;
                }
                catch (NullReferenceException)
                {
                    return new List<string>() { "This unit does not have aliases" };
                }
            }
            catch (InvalidOperationException)
            {
                return new List<string>() { "This name is not in file" };
            }
        }


        public class CatalogSymbol
        {
            public string isExplicit { get; set; }
            public string text { get; set; }
        }

        public class ConversionToBaseUnit
        {
            public string baseUnit { get; set; }
            public string Factor { get; set; }
            public Fraction Fraction { get; set; }
            public Formula Formula { get; set; }
        }

        public class Formula
        {
            public string A { get; set; }
            public string B { get; set; }
            public string C { get; set; }
            public string D { get; set; }
        }

        public class Fraction
        {
            public string Numerator { get; set; }
            public string Denominator { get; set; }
        }

        public class UOM
        {
            public string id { get; set; }
            public string annotation { get; set; }
            public string Name { get; set; }
            public object QuantityType { get; set; }
            public string DimensionalClass { get; set; }
            public object SameUnit { get; set; }
            public string CatalogName { get; set; }
            public CatalogSymbol CatalogSymbol { get; set; }
            public object BaseUnit { get; set; }
            public string Deprecated { get; set; }
            public List<string> Aliases { get; set; }
            public ConversionToBaseUnit ConversionToBaseUnit { get; set; }
        }

        public class Dimension
        {
            public string Symbol { get; set; }
            public string Definition { get; set; }
            public string SIUnit { get; set; }
        }


    }//end GroupParser

}//end namespace Docmanager